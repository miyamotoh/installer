// Code generated by MockGen. DO NOT EDIT.
// Source: ./client.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mo "github.com/vmware/govmomi/vim25/mo"
)

// MockAPI is a mock of API interface.
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI.
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance.
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// DeleteFolder mocks base method.
func (m *MockAPI) DeleteFolder(ctx context.Context, f mo.Folder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFolder", ctx, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFolder indicates an expected call of DeleteFolder.
func (mr *MockAPIMockRecorder) DeleteFolder(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFolder", reflect.TypeOf((*MockAPI)(nil).DeleteFolder), ctx, f)
}

// DeleteStoragePolicy mocks base method.
func (m *MockAPI) DeleteStoragePolicy(ctx context.Context, policyName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStoragePolicy", ctx, policyName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStoragePolicy indicates an expected call of DeleteStoragePolicy.
func (mr *MockAPIMockRecorder) DeleteStoragePolicy(ctx, policyName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStoragePolicy", reflect.TypeOf((*MockAPI)(nil).DeleteStoragePolicy), ctx, policyName)
}

// DeleteTag mocks base method.
func (m *MockAPI) DeleteTag(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTag", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTag indicates an expected call of DeleteTag.
func (mr *MockAPIMockRecorder) DeleteTag(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTag", reflect.TypeOf((*MockAPI)(nil).DeleteTag), ctx, id)
}

// DeleteTagCategory mocks base method.
func (m *MockAPI) DeleteTagCategory(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTagCategory", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTagCategory indicates an expected call of DeleteTagCategory.
func (mr *MockAPIMockRecorder) DeleteTagCategory(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTagCategory", reflect.TypeOf((*MockAPI)(nil).DeleteTagCategory), ctx, id)
}

// DeleteVirtualMachine mocks base method.
func (m *MockAPI) DeleteVirtualMachine(ctx context.Context, vmMO mo.VirtualMachine) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVirtualMachine", ctx, vmMO)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVirtualMachine indicates an expected call of DeleteVirtualMachine.
func (mr *MockAPIMockRecorder) DeleteVirtualMachine(ctx, vmMO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualMachine", reflect.TypeOf((*MockAPI)(nil).DeleteVirtualMachine), ctx, vmMO)
}

// ListFolders mocks base method.
func (m *MockAPI) ListFolders(ctx context.Context, tagID string) ([]mo.Folder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFolders", ctx, tagID)
	ret0, _ := ret[0].([]mo.Folder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFolders indicates an expected call of ListFolders.
func (mr *MockAPIMockRecorder) ListFolders(ctx, tagID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFolders", reflect.TypeOf((*MockAPI)(nil).ListFolders), ctx, tagID)
}

// ListVirtualMachines mocks base method.
func (m *MockAPI) ListVirtualMachines(ctx context.Context, tagID string) ([]mo.VirtualMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVirtualMachines", ctx, tagID)
	ret0, _ := ret[0].([]mo.VirtualMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualMachines indicates an expected call of ListVirtualMachines.
func (mr *MockAPIMockRecorder) ListVirtualMachines(ctx, tagID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualMachines", reflect.TypeOf((*MockAPI)(nil).ListVirtualMachines), ctx, tagID)
}

// Logout mocks base method.
func (m *MockAPI) Logout() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Logout")
}

// Logout indicates an expected call of Logout.
func (mr *MockAPIMockRecorder) Logout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAPI)(nil).Logout))
}

// StopVirtualMachine mocks base method.
func (m *MockAPI) StopVirtualMachine(ctx context.Context, vmMO mo.VirtualMachine) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopVirtualMachine", ctx, vmMO)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopVirtualMachine indicates an expected call of StopVirtualMachine.
func (mr *MockAPIMockRecorder) StopVirtualMachine(ctx, vmMO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopVirtualMachine", reflect.TypeOf((*MockAPI)(nil).StopVirtualMachine), ctx, vmMO)
}
